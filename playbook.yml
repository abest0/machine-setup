---
- hosts: all
  become: yes
  vars_files:
    - 'vars/defaults.yml'
    - 'vars/{{ ansible_distribution | lower }}-vars.yml'

  tasks:
    - name: Allow wheel/sudo group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^%{{ 'wheel' if ansible_os_family == 'RedHat' else 'sudo' }}"
        line: "%{{ 'wheel' if ansible_os_family == 'RedHat' else 'sudo' }} ALL=(ALL) NOPASSWD: ALL"
        validate: 'visudo -cf %s'
      tags:
        - admin

    - include_tasks: tasks/user.yml

    # - name: Add an APT repo for updated packages
    #   apt_repository:
    #     repo: ppa:jonathonf/vim
    #     state: present
    #   when: ansible_distribution == 'Ubuntu'
    #   tags: dev
    - name: update apt cache
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_pkg_mgr == "apt"
      tags:
        - packages

    - name: update dnf cache
      ansible.builtin.dnf:
        update_cache: yes
      when: ansible_pkg_mgr == "dnf"
      tags:
        - packages

    - name: Install core dev packages
      become: yes
      package:
        name: '{{ item.name | default(item) }}'
        state: "{{ item.state | default('latest') }}"
      loop: '{{ packages | flatten }}'
      tags:
        - packages

    - include_tasks: tasks/awscli-2.yml

    - name: Ensure nodesource RPM does not exist
      file:
        path: etc/yum.repos.d/nodesource-el7.repo
        state: absent
      tags:
        - node

    - name: Install jp
      get_url:
        url: "https://github.com/jmespath/jp/releases/download/0.1.3/jp-linux-{{ 'amd64' if ansible_architecture == 'x86_64' else '386'}}"
        dest: /usr/local/bin/jp
        mode: 'a+x'
      tags:
        - dev

    - include_tasks: tasks/dev-tools.yml
      tags:
        - dev
        - python

    - name: Ensure pip_install_packages are installed.
      become_user: '{{ dev_user }}'
      community.general.pipx:
        name: '{{ item.name | default(item) }}'
        state: '{{ item.state | default("latest") }}'
      vars:
        pipx_packages:
          - ipython
          - pre-commit
          - poetry
      with_items: '{{ pipx_packages }}'
      tags:
        - pipx

    - import_role:
        name: ansible-role-docker
      vars:
        docker_users:
          - '{{ dev_user }}'
      tags:
        - apps
        - docker

    - name: Ensure npm global packages are installed.
      npm:
        name: '{{ item.name | default(item) }}'
        version: '{{ item.version | default(omit) }}'
        global: true
        state: "{{ item.state | default('present') }}"
      environment:
        NPM_CONFIG_PREFIX: '{{ npm_config_prefix }}'
        NODE_PATH: '{{ npm_config_prefix }}/lib/node_modules'
        NPM_CONFIG_UNSAFE_PERM: '{{ npm_config_unsafe_perm }}'
      when: ansible_distribution_version == "2023"
      with_items: '{{ node_packages }}'
      tags:
        - apps
        - node

    - import_role:
        name: geerlingguy.nodejs
      vars:
        nodejs_install_npm_user: '{{ dev_user }}'
        ansible_distribution_major_version: 8
        nodejs_version: '{{ user_nodejs_version }}'
        nodejs_npm_global_packages: '{{ node_packages }}'
      when: ansible_distribution_version != "2023"
      tags:
        - apps
        - node

    - name: Update bashrc to source the pyenv extension
      become_user: '{{ dev_user }}'
      lineinfile:
        dest: $HOME/.bashrc
        state: present
        regexp: '^source .pyenvrc$'
        line: 'source $HOME/.pyenvrc'
      tags:
        - bashrc
        - pyenv

    - name: Check oh-my-zsh installed
      become_user: '{{ dev_user }}'
      stat:
        path: $HOME/.oh-my-zsh
      register: oh_my_zsh_dir
      tags:
        - zsh

    - name: Install oh-my-zsh
      become_user: '{{ dev_user }}'
      git:
        repo: https://github.com/robbyrussell/oh-my-zsh
        dest: $HOME/.oh-my-zsh
        depth: 1
      when: not oh_my_zsh_dir.stat.exists
      tags:
        - zsh

    - name: Update shell for user profile
      user:
        name: '{{ dev_user }}'
        shell: /usr/bin/zsh
      tags:
        - zsh

    - include_tasks: tasks/home.yml
      tags:
        - dotfiles
        - backup
        - home_env
        - ssh

    - include_tasks: tasks/auto-shutdown.yml
      tags: shutdown

    - name: Copy install-tmux script
      # become_user: "{{ dev_user }}"
      script: files/install-tmux.sh
      tags:
        - tmux
